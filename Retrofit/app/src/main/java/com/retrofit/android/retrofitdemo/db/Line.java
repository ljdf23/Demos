package com.retrofit.android.retrofitdemo.db;

import org.greenrobot.greendao.annotation.*;

import com.retrofit.android.retrofitdemo.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "LINE".
 */
@Entity(active = true)
public class Line {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String lineId;
    private Long number;
    private Long planId;
    private String planName;
    private String owner;
    private Boolean mainLine;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient LineDao myDao;

    @ToOne
    @Property(nameInDb = "id")
    private PlainDetail planDetail;

    @Generated
    private transient boolean planDetail__refreshed;

    // KEEP FIELDS - put your custom fields here
    int i=0;
    // KEEP FIELDS END

    @Generated
    public Line() {
    }

    public Line(Long id) {
        this.id = id;
    }

    @Generated
    public Line(Long id, String lineId, Long number, Long planId, String planName, String owner, Boolean mainLine) {
        this.id = id;
        this.lineId = lineId;
        this.number = number;
        this.planId = planId;
        this.planName = planName;
        this.owner = owner;
        this.mainLine = mainLine;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLineDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getLineId() {
        return lineId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLineId(@NotNull String lineId) {
        this.lineId = lineId;
    }

    public Long getNumber() {
        return number;
    }

    public void setNumber(Long number) {
        this.number = number;
    }

    public Long getPlanId() {
        return planId;
    }

    public void setPlanId(Long planId) {
        this.planId = planId;
    }

    public String getPlanName() {
        return planName;
    }

    public void setPlanName(String planName) {
        this.planName = planName;
    }

    public String getOwner() {
        return owner;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }

    public Boolean getMainLine() {
        return mainLine;
    }

    public void setMainLine(Boolean mainLine) {
        this.mainLine = mainLine;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public PlainDetail getPlanDetail() {
        if (planDetail != null || !planDetail__refreshed) {
            __throwIfDetached();
            PlainDetailDao targetDao = daoSession.getPlainDetailDao();
            targetDao.refresh(planDetail);
            planDetail__refreshed = true;
        }
        return planDetail;
    }

    /** To-one relationship, returned entity is not refreshed and may carry only the PK property. */
    @Generated
    public PlainDetail peakPlanDetail() {
        return planDetail;
    }

    @Generated
    public void setPlanDetail(PlainDetail planDetail) {
        synchronized (this) {
            this.planDetail = planDetail;
            planDetail__refreshed = true;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
