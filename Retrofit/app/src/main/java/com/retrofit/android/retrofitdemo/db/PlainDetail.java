package com.retrofit.android.retrofitdemo.db;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.retrofit.android.retrofitdemo.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "PLAIN_DETAIL".
 */
@Entity(active = true)
public class PlainDetail {

    @Id(autoincrement = true)
    private Long id;
    private Long remainMinutes;
    private Long remainSms;
    private Long remainInternet;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient PlainDetailDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "id")
    })
    private List<Other> other;

    // KEEP FIELDS - put your custom fields here
    public void setOthers(List<Other> pOthers)
    {
        other = pOthers;
    }
    public List<Other> getOthersWithoutRelation() { return other;}
    // KEEP FIELDS END

    @Generated
    public PlainDetail() {
    }

    public PlainDetail(Long id) {
        this.id = id;
    }

    @Generated
    public PlainDetail(Long id, Long remainMinutes, Long remainSms, Long remainInternet) {
        this.id = id;
        this.remainMinutes = remainMinutes;
        this.remainSms = remainSms;
        this.remainInternet = remainInternet;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPlainDetailDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getRemainMinutes() {
        return remainMinutes;
    }

    public void setRemainMinutes(Long remainMinutes) {
        this.remainMinutes = remainMinutes;
    }

    public Long getRemainSms() {
        return remainSms;
    }

    public void setRemainSms(Long remainSms) {
        this.remainSms = remainSms;
    }

    public Long getRemainInternet() {
        return remainInternet;
    }

    public void setRemainInternet(Long remainInternet) {
        this.remainInternet = remainInternet;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Other> getOther() {
        if (other == null) {
            __throwIfDetached();
            OtherDao targetDao = daoSession.getOtherDao();
            List<Other> otherNew = targetDao._queryPlainDetail_Other(id);
            synchronized (this) {
                if(other == null) {
                    other = otherNew;
                }
            }
        }
        return other;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetOther() {
        other = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
